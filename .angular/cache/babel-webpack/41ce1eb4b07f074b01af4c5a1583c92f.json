{"ast":null,"code":"import _asyncToGenerator from \"C:/cursos_Udemy/Angular/listado-personas/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDb } from 'idb';\nconst name = \"@firebase/installations\";\nconst version = \"0.5.4\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst PENDING_TIMEOUT_MS = 10000;\nconst PACKAGE_VERSION = `w:${version}`;\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nconst SERVICE = 'installations';\nconst SERVICE_NAME = 'Installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERROR_DESCRIPTION_MAP = {\n  [\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  ]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"not-registered\"\n  /* NOT_REGISTERED */\n  ]: 'Firebase Installation is not registered.',\n  [\"installation-not-found\"\n  /* INSTALLATION_NOT_FOUND */\n  ]: 'Firebase Installation not found.',\n  [\"request-failed\"\n  /* REQUEST_FAILED */\n  ]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [\"app-offline\"\n  /* APP_OFFLINE */\n  ]: 'Could not process request. Application offline.',\n  [\"delete-pending-registration\"\n  /* DELETE_PENDING_REGISTRATION */\n  ]: \"Can't delete installation while there is a pending registration request.\"\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\n\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\"\n  /* REQUEST_FAILED */\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getInstallationsEndpoint({\n  projectId\n}) {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2\n    /* COMPLETED */\n    ,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nfunction getErrorFromResponse(_x, _x2) {\n  return _getErrorFromResponse.apply(this, arguments);\n}\n\nfunction _getErrorFromResponse() {\n  _getErrorFromResponse = _asyncToGenerator(function* (requestName, response) {\n    const responseJson = yield response.json();\n    const errorData = responseJson.error;\n    return ERROR_FACTORY.create(\"request-failed\"\n    /* REQUEST_FAILED */\n    , {\n      requestName,\n      serverCode: errorData.code,\n      serverMessage: errorData.message,\n      serverStatus: errorData.status\n    });\n  });\n  return _getErrorFromResponse.apply(this, arguments);\n}\n\nfunction getHeaders({\n  apiKey\n}) {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nfunction getHeadersWithAuth(appConfig, {\n  refreshToken\n}) {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\n\n\nfunction retryIfServerError(_x3) {\n  return _retryIfServerError.apply(this, arguments);\n}\n\nfunction _retryIfServerError() {\n  _retryIfServerError = _asyncToGenerator(function* (fn) {\n    const result = yield fn();\n\n    if (result.status >= 500 && result.status < 600) {\n      // Internal Server Error. Retry request.\n      return fn();\n    }\n\n    return result;\n  });\n  return _retryIfServerError.apply(this, arguments);\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken) {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction createInstallationRequest(_x4, _x5) {\n  return _createInstallationRequest.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction _createInstallationRequest() {\n  _createInstallationRequest = _asyncToGenerator(function* (appConfig, {\n    fid\n  }) {\n    const endpoint = getInstallationsEndpoint(appConfig);\n    const headers = getHeaders(appConfig);\n    const body = {\n      fid,\n      authVersion: INTERNAL_AUTH_VERSION,\n      appId: appConfig.appId,\n      sdkVersion: PACKAGE_VERSION\n    };\n    const request = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body)\n    };\n    const response = yield retryIfServerError(() => fetch(endpoint, request));\n\n    if (response.ok) {\n      const responseValue = yield response.json();\n      const registeredInstallationEntry = {\n        fid: responseValue.fid || fid,\n        registrationStatus: 2\n        /* COMPLETED */\n        ,\n        refreshToken: responseValue.refreshToken,\n        authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n      };\n      return registeredInstallationEntry;\n    } else {\n      throw yield getErrorFromResponse('Create Installation', response);\n    }\n  });\n  return _createInstallationRequest.apply(this, arguments);\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction bufferToBase64UrlSafe(array) {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nconst INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\n\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto = self.crypto || self.msCrypto;\n    crypto.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.\n\n    fidByteArray[0] = 0b01110000 + fidByteArray[0] % 0b00010000;\n    const fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\n\n\nfunction encode(fidByteArray) {\n  const b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n\n  return b64String.substr(0, 22);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a string key that can be used to identify the app. */\n\n\nfunction getKey(appConfig) {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\n\nfunction fidChanged(appConfig, fid) {\n  const key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  const key = getKey(appConfig);\n  let callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n\n  callbackSet.add(callback);\n}\n\nfunction removeCallback(appConfig, callback) {\n  const key = getKey(appConfig);\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  } // Close broadcast channel if there are no more callbacks.\n\n\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key, fid) {\n  const callbacks = fidChangeCallbacks.get(key);\n\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key, fid) {\n  const channel = getBroadcastChannel();\n\n  if (channel) {\n    channel.postMessage({\n      key,\n      fid\n    });\n  }\n\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\n\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nfunction set(_x6, _x7) {\n  return _set.apply(this, arguments);\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nfunction _set() {\n  _set = _asyncToGenerator(function* (appConfig, value) {\n    const key = getKey(appConfig);\n    const db = yield getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n    const oldValue = yield objectStore.get(key);\n    yield objectStore.put(value, key);\n    yield tx.complete;\n\n    if (!oldValue || oldValue.fid !== value.fid) {\n      fidChanged(appConfig, value.fid);\n    }\n\n    return value;\n  });\n  return _set.apply(this, arguments);\n}\n\nfunction remove(_x8) {\n  return _remove.apply(this, arguments);\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\n\n\nfunction _remove() {\n  _remove = _asyncToGenerator(function* (appConfig) {\n    const key = getKey(appConfig);\n    const db = yield getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    yield tx.objectStore(OBJECT_STORE_NAME).delete(key);\n    yield tx.complete;\n  });\n  return _remove.apply(this, arguments);\n}\n\nfunction update(_x9, _x10) {\n  return _update.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\n\n\nfunction _update() {\n  _update = _asyncToGenerator(function* (appConfig, updateFn) {\n    const key = getKey(appConfig);\n    const db = yield getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    const store = tx.objectStore(OBJECT_STORE_NAME);\n    const oldValue = yield store.get(key);\n    const newValue = updateFn(oldValue);\n\n    if (newValue === undefined) {\n      yield store.delete(key);\n    } else {\n      yield store.put(newValue, key);\n    }\n\n    yield tx.complete;\n\n    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n      fidChanged(appConfig, newValue.fid);\n    }\n\n    return newValue;\n  });\n  return _update.apply(this, arguments);\n}\n\nfunction getInstallationEntry(_x11) {\n  return _getInstallationEntry.apply(this, arguments);\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\n\n\nfunction _getInstallationEntry() {\n  _getInstallationEntry = _asyncToGenerator(function* (appConfig) {\n    let registrationPromise;\n    const installationEntry = yield update(appConfig, oldEntry => {\n      const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n      const entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);\n      registrationPromise = entryWithPromise.registrationPromise;\n      return entryWithPromise.installationEntry;\n    });\n\n    if (installationEntry.fid === INVALID_FID) {\n      // FID generation failed. Waiting for the FID from the server.\n      return {\n        installationEntry: yield registrationPromise\n      };\n    }\n\n    return {\n      installationEntry,\n      registrationPromise\n    };\n  });\n  return _getInstallationEntry.apply(this, arguments);\n}\n\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  const entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0\n    /* NOT_STARTED */\n\n  };\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\n\n\nfunction triggerRegistrationIfNecessary(appConfig, installationEntry) {\n  if (installationEntry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\"\n      /* APP_OFFLINE */\n      ));\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    } // Try registering. Change status to IN_PROGRESS.\n\n\n    const inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1\n      /* IN_PROGRESS */\n      ,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(appConfig, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return {\n      installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\n\n\nfunction registerInstallation(_x12, _x13) {\n  return _registerInstallation.apply(this, arguments);\n}\n/** Call if FID registration is pending in another request. */\n\n\nfunction _registerInstallation() {\n  _registerInstallation = _asyncToGenerator(function* (appConfig, installationEntry) {\n    try {\n      const registeredInstallationEntry = yield createInstallationRequest(appConfig, installationEntry);\n      return set(appConfig, registeredInstallationEntry);\n    } catch (e) {\n      if (isServerError(e) && e.customData.serverCode === 409) {\n        // Server returned a \"FID can not be used\" error.\n        // Generate a new ID next time.\n        yield remove(appConfig);\n      } else {\n        // Registration failed. Set FID as not registered.\n        yield set(appConfig, {\n          fid: installationEntry.fid,\n          registrationStatus: 0\n          /* NOT_STARTED */\n\n        });\n      }\n\n      throw e;\n    }\n  });\n  return _registerInstallation.apply(this, arguments);\n}\n\nfunction waitUntilFidRegistration(_x14) {\n  return _waitUntilFidRegistration.apply(this, arguments);\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction _waitUntilFidRegistration() {\n  _waitUntilFidRegistration = _asyncToGenerator(function* (appConfig) {\n    // Unfortunately, there is no way of reliably observing when a value in\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n    // so we need to poll.\n    let entry = yield updateInstallationRequest(appConfig);\n\n    while (entry.registrationStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // createInstallation request still in progress.\n      yield sleep(100);\n      entry = yield updateInstallationRequest(appConfig);\n    }\n\n    if (entry.registrationStatus === 0\n    /* NOT_STARTED */\n    ) {\n      // The request timed out or failed in a different call. Try again.\n      const {\n        installationEntry,\n        registrationPromise\n      } = yield getInstallationEntry(appConfig);\n\n      if (registrationPromise) {\n        return registrationPromise;\n      } else {\n        // if there is no registrationPromise, entry is registered.\n        return installationEntry;\n      }\n    }\n\n    return entry;\n  });\n  return _waitUntilFidRegistration.apply(this, arguments);\n}\n\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\"\n      /* INSTALLATION_NOT_FOUND */\n      );\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0\n      /* NOT_STARTED */\n\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction generateAuthTokenRequest(_x15, _x16) {\n  return _generateAuthTokenRequest.apply(this, arguments);\n}\n\nfunction _generateAuthTokenRequest() {\n  _generateAuthTokenRequest = _asyncToGenerator(function* ({\n    appConfig,\n    platformLoggerProvider\n  }, installationEntry) {\n    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n    const headers = getHeadersWithAuth(appConfig, installationEntry); // If platform logger exists, add the platform info string to the header.\n\n    const platformLogger = platformLoggerProvider.getImmediate({\n      optional: true\n    });\n\n    if (platformLogger) {\n      headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n    }\n\n    const body = {\n      installation: {\n        sdkVersion: PACKAGE_VERSION\n      }\n    };\n    const request = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body)\n    };\n    const response = yield retryIfServerError(() => fetch(endpoint, request));\n\n    if (response.ok) {\n      const responseValue = yield response.json();\n      const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n      return completedAuthToken;\n    } else {\n      throw yield getErrorFromResponse('Generate Auth Token', response);\n    }\n  });\n  return _generateAuthTokenRequest.apply(this, arguments);\n}\n\nfunction getGenerateAuthTokenEndpoint(appConfig, {\n  fid\n}) {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\n\n\nfunction refreshAuthToken(_x17) {\n  return _refreshAuthToken.apply(this, arguments);\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\n\n\nfunction _refreshAuthToken() {\n  _refreshAuthToken = _asyncToGenerator(function* (installations, forceRefresh = false) {\n    let tokenPromise;\n    const entry = yield update(installations.appConfig, oldEntry => {\n      if (!isEntryRegistered(oldEntry)) {\n        throw ERROR_FACTORY.create(\"not-registered\"\n        /* NOT_REGISTERED */\n        );\n      }\n\n      const oldAuthToken = oldEntry.authToken;\n\n      if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n        // There is a valid token in the DB.\n        return oldEntry;\n      } else if (oldAuthToken.requestStatus === 1\n      /* IN_PROGRESS */\n      ) {\n        // There already is a token request in progress.\n        tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n        return oldEntry;\n      } else {\n        // No token or token expired.\n        if (!navigator.onLine) {\n          throw ERROR_FACTORY.create(\"app-offline\"\n          /* APP_OFFLINE */\n          );\n        }\n\n        const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n        tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n        return inProgressEntry;\n      }\n    });\n    const authToken = tokenPromise ? yield tokenPromise : entry.authToken;\n    return authToken;\n  });\n  return _refreshAuthToken.apply(this, arguments);\n}\n\nfunction waitUntilAuthTokenRequest(_x18, _x19) {\n  return _waitUntilAuthTokenRequest.apply(this, arguments);\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction _waitUntilAuthTokenRequest() {\n  _waitUntilAuthTokenRequest = _asyncToGenerator(function* (installations, forceRefresh) {\n    // Unfortunately, there is no way of reliably observing when a value in\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n    // so we need to poll.\n    let entry = yield updateAuthTokenRequest(installations.appConfig);\n\n    while (entry.authToken.requestStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // generateAuthToken still in progress.\n      yield sleep(100);\n      entry = yield updateAuthTokenRequest(installations.appConfig);\n    }\n\n    const authToken = entry.authToken;\n\n    if (authToken.requestStatus === 0\n    /* NOT_STARTED */\n    ) {\n      // The request timed out or failed in a different call. Try again.\n      return refreshAuthToken(installations, forceRefresh);\n    } else {\n      return authToken;\n    }\n  });\n  return _waitUntilAuthTokenRequest.apply(this, arguments);\n}\n\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return Object.assign(Object.assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\n\nfunction fetchAuthTokenFromServer(_x20, _x21) {\n  return _fetchAuthTokenFromServer.apply(this, arguments);\n}\n\nfunction _fetchAuthTokenFromServer() {\n  _fetchAuthTokenFromServer = _asyncToGenerator(function* (installations, installationEntry) {\n    try {\n      const authToken = yield generateAuthTokenRequest(installations, installationEntry);\n      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n        authToken\n      });\n      yield set(installations.appConfig, updatedInstallationEntry);\n      return authToken;\n    } catch (e) {\n      if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\n        // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n        // Generate a new ID next time.\n        yield remove(installations.appConfig);\n      } else {\n        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n          authToken: {\n            requestStatus: 0\n            /* NOT_STARTED */\n\n          }\n        });\n        yield set(installations.appConfig, updatedInstallationEntry);\n      }\n\n      throw e;\n    }\n  });\n  return _fetchAuthTokenFromServer.apply(this, arguments);\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2\n  /* COMPLETED */\n  ;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2\n  /* COMPLETED */\n  && !isAuthTokenExpired(authToken);\n}\n\nfunction isAuthTokenExpired(authToken) {\n  const now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\n\n\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  const inProgressAuthToken = {\n    requestStatus: 1\n    /* IN_PROGRESS */\n    ,\n    requestTime: Date.now()\n  };\n  return Object.assign(Object.assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getId(_x22) {\n  return _getId.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\n\n\nfunction _getId() {\n  _getId = _asyncToGenerator(function* (installations) {\n    const installationsImpl = installations;\n    const {\n      installationEntry,\n      registrationPromise\n    } = yield getInstallationEntry(installationsImpl.appConfig);\n\n    if (registrationPromise) {\n      registrationPromise.catch(console.error);\n    } else {\n      // If the installation is already registered, update the authentication\n      // token if needed.\n      refreshAuthToken(installationsImpl).catch(console.error);\n    }\n\n    return installationEntry.fid;\n  });\n  return _getId.apply(this, arguments);\n}\n\nfunction getToken(_x23) {\n  return _getToken.apply(this, arguments);\n}\n\nfunction _getToken() {\n  _getToken = _asyncToGenerator(function* (installations, forceRefresh = false) {\n    const installationsImpl = installations;\n    yield completeInstallationRegistration(installationsImpl.appConfig); // At this point we either have a Registered Installation in the DB, or we've\n    // already thrown an error.\n\n    const authToken = yield refreshAuthToken(installationsImpl, forceRefresh);\n    return authToken.token;\n  });\n  return _getToken.apply(this, arguments);\n}\n\nfunction completeInstallationRegistration(_x24) {\n  return _completeInstallationRegistration.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _completeInstallationRegistration() {\n  _completeInstallationRegistration = _asyncToGenerator(function* (appConfig) {\n    const {\n      registrationPromise\n    } = yield getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      // A createInstallation request is in progress. Wait until it finishes.\n      yield registrationPromise;\n    }\n  });\n  return _completeInstallationRegistration.apply(this, arguments);\n}\n\nfunction deleteInstallationRequest(_x25, _x26) {\n  return _deleteInstallationRequest.apply(this, arguments);\n}\n\nfunction _deleteInstallationRequest() {\n  _deleteInstallationRequest = _asyncToGenerator(function* (appConfig, installationEntry) {\n    const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\n    const request = {\n      method: 'DELETE',\n      headers\n    };\n    const response = yield retryIfServerError(() => fetch(endpoint, request));\n\n    if (!response.ok) {\n      throw yield getErrorFromResponse('Delete Installation', response);\n    }\n  });\n  return _deleteInstallationRequest.apply(this, arguments);\n}\n\nfunction getDeleteEndpoint(appConfig, {\n  fid\n}) {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nfunction deleteInstallations(_x27) {\n  return _deleteInstallations.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\n\n\nfunction _deleteInstallations() {\n  _deleteInstallations = _asyncToGenerator(function* (installations) {\n    const {\n      appConfig\n    } = installations;\n    const entry = yield update(appConfig, oldEntry => {\n      if (oldEntry && oldEntry.registrationStatus === 0\n      /* NOT_STARTED */\n      ) {\n        // Delete the unregistered entry without sending a deleteInstallation request.\n        return undefined;\n      }\n\n      return oldEntry;\n    });\n\n    if (entry) {\n      if (entry.registrationStatus === 1\n      /* IN_PROGRESS */\n      ) {\n        // Can't delete while trying to register.\n        throw ERROR_FACTORY.create(\"delete-pending-registration\"\n        /* DELETE_PENDING_REGISTRATION */\n        );\n      } else if (entry.registrationStatus === 2\n      /* COMPLETED */\n      ) {\n        if (!navigator.onLine) {\n          throw ERROR_FACTORY.create(\"app-offline\"\n          /* APP_OFFLINE */\n          );\n        } else {\n          yield deleteInstallationRequest(appConfig, entry);\n          yield remove(appConfig);\n        }\n      }\n    }\n  });\n  return _deleteInstallations.apply(this, arguments);\n}\n\nfunction onIdChange(installations, callback) {\n  const {\n    appConfig\n  } = installations;\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getInstallations(app = getApp()) {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n\n  return installationsImpl;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  const configKeys = ['projectId', 'apiKey', 'appId'];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.\n\n  const appConfig = extractAppConfig(app);\n\n  const platformLoggerProvider = _getProvider(app, 'platform-logger');\n\n  const installationsImpl = {\n    app,\n    appConfig,\n    platformLoggerProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Internal FIS instance relies on public FIS instance.\n\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal = {\n    getId: () => getId(installations),\n    getToken: forceRefresh => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nfunction registerInstallations() {\n  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n}\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterInstallations();\nregisterVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\nregisterVersion(name, version, 'esm2017');\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };","map":{"version":3,"sources":["C:/cursos_Udemy/Angular/listado-personas/node_modules/@firebase/installations/dist/esm/index.esm2017.js"],"names":["getApp","_getProvider","_registerComponent","registerVersion","Component","ErrorFactory","FirebaseError","openDb","name","version","PENDING_TIMEOUT_MS","PACKAGE_VERSION","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","isServerError","error","code","includes","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","requestName","responseJson","json","errorData","create","serverCode","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","Number","replace","createInstallationRequest","fid","endpoint","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","resolve","setTimeout","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","encode","test","_a","b64String","substr","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","addCallback","callback","getBroadcastChannel","callbackSet","get","Set","set","add","removeCallback","delete","size","closeBroadcastChannel","callbacks","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeDB","oldVersion","createObjectStore","value","db","tx","transaction","objectStore","oldValue","put","complete","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","registrationPromise","installationEntry","oldEntry","updateOrCreateInstallationEntry","entryWithPromise","triggerRegistrationIfNecessary","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","customData","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","platformLoggerProvider","getGenerateAuthTokenEndpoint","platformLogger","getImmediate","optional","getPlatformInfoString","installation","completedAuthToken","refreshAuthToken","installations","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenValid","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","Object","assign","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","installationsImpl","catch","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","deleteInstallations","onIdChange","getInstallations","app","extractAppConfig","options","getMissingValueError","configKeys","keyName","valueName","INSTALLATIONS_NAME","INSTALLATIONS_NAME_INTERNAL","publicFactory","container","getProvider","_delete","internalFactory","installationsInternal","registerInstallations"],"mappings":"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","sourcesContent":["import { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDb } from 'idb';\n\nconst name = \"@firebase/installations\";\nconst version = \"0.5.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PENDING_TIMEOUT_MS = 10000;\r\nconst PACKAGE_VERSION = `w:${version}`;\r\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\r\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\r\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\r\nconst SERVICE = 'installations';\r\nconst SERVICE_NAME = 'Installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: \"{$valueName}\"',\r\n    [\"not-registered\" /* NOT_REGISTERED */]: 'Firebase Installation is not registered.',\r\n    [\"installation-not-found\" /* INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',\r\n    [\"request-failed\" /* REQUEST_FAILED */]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\r\n    [\"app-offline\" /* APP_OFFLINE */]: 'Could not process request. Application offline.',\r\n    [\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */]: \"Can't delete installation while there is a pending registration request.\"\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\r\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\r\nfunction isServerError(error) {\r\n    return (error instanceof FirebaseError &&\r\n        error.code.includes(\"request-failed\" /* REQUEST_FAILED */));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getInstallationsEndpoint({ projectId }) {\r\n    return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\r\n}\r\nfunction extractAuthTokenInfoFromResponse(response) {\r\n    return {\r\n        token: response.token,\r\n        requestStatus: 2 /* COMPLETED */,\r\n        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\r\n        creationTime: Date.now()\r\n    };\r\n}\r\nasync function getErrorFromResponse(requestName, response) {\r\n    const responseJson = await response.json();\r\n    const errorData = responseJson.error;\r\n    return ERROR_FACTORY.create(\"request-failed\" /* REQUEST_FAILED */, {\r\n        requestName,\r\n        serverCode: errorData.code,\r\n        serverMessage: errorData.message,\r\n        serverStatus: errorData.status\r\n    });\r\n}\r\nfunction getHeaders({ apiKey }) {\r\n    return new Headers({\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\nfunction getHeadersWithAuth(appConfig, { refreshToken }) {\r\n    const headers = getHeaders(appConfig);\r\n    headers.append('Authorization', getAuthorizationHeader(refreshToken));\r\n    return headers;\r\n}\r\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\r\nasync function retryIfServerError(fn) {\r\n    const result = await fn();\r\n    if (result.status >= 500 && result.status < 600) {\r\n        // Internal Server Error. Retry request.\r\n        return fn();\r\n    }\r\n    return result;\r\n}\r\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\r\n    // This works because the server will never respond with fractions of a second.\r\n    return Number(responseExpiresIn.replace('s', '000'));\r\n}\r\nfunction getAuthorizationHeader(refreshToken) {\r\n    return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function createInstallationRequest(appConfig, { fid }) {\r\n    const endpoint = getInstallationsEndpoint(appConfig);\r\n    const headers = getHeaders(appConfig);\r\n    const body = {\r\n        fid,\r\n        authVersion: INTERNAL_AUTH_VERSION,\r\n        appId: appConfig.appId,\r\n        sdkVersion: PACKAGE_VERSION\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const registeredInstallationEntry = {\r\n            fid: responseValue.fid || fid,\r\n            registrationStatus: 2 /* COMPLETED */,\r\n            refreshToken: responseValue.refreshToken,\r\n            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\r\n        };\r\n        return registeredInstallationEntry;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Create Installation', response);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a promise that resolves after given time passes. */\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction bufferToBase64UrlSafe(array) {\r\n    const b64 = btoa(String.fromCharCode(...array));\r\n    return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\r\nconst INVALID_FID = '';\r\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\r\nfunction generateFid() {\r\n    try {\r\n        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\r\n        // bytes. our implementation generates a 17 byte array instead.\r\n        const fidByteArray = new Uint8Array(17);\r\n        const crypto = self.crypto || self.msCrypto;\r\n        crypto.getRandomValues(fidByteArray);\r\n        // Replace the first 4 random bits with the constant FID header of 0b0111.\r\n        fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\r\n        const fid = encode(fidByteArray);\r\n        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\r\n    }\r\n    catch (_a) {\r\n        // FID generation errored\r\n        return INVALID_FID;\r\n    }\r\n}\r\n/** Converts a FID Uint8Array to a base64 string representation. */\r\nfunction encode(fidByteArray) {\r\n    const b64String = bufferToBase64UrlSafe(fidByteArray);\r\n    // Remove the 23rd character that was added because of the extra 4 bits at the\r\n    // end of our 17 byte array, and the '=' padding.\r\n    return b64String.substr(0, 22);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a string key that can be used to identify the app. */\r\nfunction getKey(appConfig) {\r\n    return `${appConfig.appName}!${appConfig.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst fidChangeCallbacks = new Map();\r\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\r\nfunction fidChanged(appConfig, fid) {\r\n    const key = getKey(appConfig);\r\n    callFidChangeCallbacks(key, fid);\r\n    broadcastFidChange(key, fid);\r\n}\r\nfunction addCallback(appConfig, callback) {\r\n    // Open the broadcast channel if it's not already open,\r\n    // to be able to listen to change events from other tabs.\r\n    getBroadcastChannel();\r\n    const key = getKey(appConfig);\r\n    let callbackSet = fidChangeCallbacks.get(key);\r\n    if (!callbackSet) {\r\n        callbackSet = new Set();\r\n        fidChangeCallbacks.set(key, callbackSet);\r\n    }\r\n    callbackSet.add(callback);\r\n}\r\nfunction removeCallback(appConfig, callback) {\r\n    const key = getKey(appConfig);\r\n    const callbackSet = fidChangeCallbacks.get(key);\r\n    if (!callbackSet) {\r\n        return;\r\n    }\r\n    callbackSet.delete(callback);\r\n    if (callbackSet.size === 0) {\r\n        fidChangeCallbacks.delete(key);\r\n    }\r\n    // Close broadcast channel if there are no more callbacks.\r\n    closeBroadcastChannel();\r\n}\r\nfunction callFidChangeCallbacks(key, fid) {\r\n    const callbacks = fidChangeCallbacks.get(key);\r\n    if (!callbacks) {\r\n        return;\r\n    }\r\n    for (const callback of callbacks) {\r\n        callback(fid);\r\n    }\r\n}\r\nfunction broadcastFidChange(key, fid) {\r\n    const channel = getBroadcastChannel();\r\n    if (channel) {\r\n        channel.postMessage({ key, fid });\r\n    }\r\n    closeBroadcastChannel();\r\n}\r\nlet broadcastChannel = null;\r\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\r\nfunction getBroadcastChannel() {\r\n    if (!broadcastChannel && 'BroadcastChannel' in self) {\r\n        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\r\n        broadcastChannel.onmessage = e => {\r\n            callFidChangeCallbacks(e.data.key, e.data.fid);\r\n        };\r\n    }\r\n    return broadcastChannel;\r\n}\r\nfunction closeBroadcastChannel() {\r\n    if (fidChangeCallbacks.size === 0 && broadcastChannel) {\r\n        broadcastChannel.close();\r\n        broadcastChannel = null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DATABASE_NAME = 'firebase-installations-database';\r\nconst DATABASE_VERSION = 1;\r\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\r\n            // We don't use 'break' in this switch statement, the fall-through\r\n            // behavior is what we want, because if there are multiple versions between\r\n            // the old version and the current version, we want ALL the migrations\r\n            // that correspond to those versions to run, not only the last one.\r\n            // eslint-disable-next-line default-case\r\n            switch (upgradeDB.oldVersion) {\r\n                case 0:\r\n                    upgradeDB.createObjectStore(OBJECT_STORE_NAME);\r\n            }\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\n/** Assigns or overwrites the record for the given key with the given value. */\r\nasync function set(appConfig, value) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const objectStore = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = await objectStore.get(key);\r\n    await objectStore.put(value, key);\r\n    await tx.complete;\r\n    if (!oldValue || oldValue.fid !== value.fid) {\r\n        fidChanged(appConfig, value.fid);\r\n    }\r\n    return value;\r\n}\r\n/** Removes record(s) from the objectStore that match the given key. */\r\nasync function remove(appConfig) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    await tx.objectStore(OBJECT_STORE_NAME).delete(key);\r\n    await tx.complete;\r\n}\r\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\r\nasync function update(appConfig, updateFn) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const store = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = await store.get(key);\r\n    const newValue = updateFn(oldValue);\r\n    if (newValue === undefined) {\r\n        await store.delete(key);\r\n    }\r\n    else {\r\n        await store.put(newValue, key);\r\n    }\r\n    await tx.complete;\r\n    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\r\n        fidChanged(appConfig, newValue.fid);\r\n    }\r\n    return newValue;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\r\nasync function getInstallationEntry(appConfig) {\r\n    let registrationPromise;\r\n    const installationEntry = await update(appConfig, oldEntry => {\r\n        const installationEntry = updateOrCreateInstallationEntry(oldEntry);\r\n        const entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);\r\n        registrationPromise = entryWithPromise.registrationPromise;\r\n        return entryWithPromise.installationEntry;\r\n    });\r\n    if (installationEntry.fid === INVALID_FID) {\r\n        // FID generation failed. Waiting for the FID from the server.\r\n        return { installationEntry: await registrationPromise };\r\n    }\r\n    return {\r\n        installationEntry,\r\n        registrationPromise\r\n    };\r\n}\r\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\r\nfunction updateOrCreateInstallationEntry(oldEntry) {\r\n    const entry = oldEntry || {\r\n        fid: generateFid(),\r\n        registrationStatus: 0 /* NOT_STARTED */\r\n    };\r\n    return clearTimedOutRequest(entry);\r\n}\r\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\r\nfunction triggerRegistrationIfNecessary(appConfig, installationEntry) {\r\n    if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n        if (!navigator.onLine) {\r\n            // Registration required but app is offline.\r\n            const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */));\r\n            return {\r\n                installationEntry,\r\n                registrationPromise: registrationPromiseWithError\r\n            };\r\n        }\r\n        // Try registering. Change status to IN_PROGRESS.\r\n        const inProgressEntry = {\r\n            fid: installationEntry.fid,\r\n            registrationStatus: 1 /* IN_PROGRESS */,\r\n            registrationTime: Date.now()\r\n        };\r\n        const registrationPromise = registerInstallation(appConfig, inProgressEntry);\r\n        return { installationEntry: inProgressEntry, registrationPromise };\r\n    }\r\n    else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n        return {\r\n            installationEntry,\r\n            registrationPromise: waitUntilFidRegistration(appConfig)\r\n        };\r\n    }\r\n    else {\r\n        return { installationEntry };\r\n    }\r\n}\r\n/** This will be executed only once for each new Firebase Installation. */\r\nasync function registerInstallation(appConfig, installationEntry) {\r\n    try {\r\n        const registeredInstallationEntry = await createInstallationRequest(appConfig, installationEntry);\r\n        return set(appConfig, registeredInstallationEntry);\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) && e.customData.serverCode === 409) {\r\n            // Server returned a \"FID can not be used\" error.\r\n            // Generate a new ID next time.\r\n            await remove(appConfig);\r\n        }\r\n        else {\r\n            // Registration failed. Set FID as not registered.\r\n            await set(appConfig, {\r\n                fid: installationEntry.fid,\r\n                registrationStatus: 0 /* NOT_STARTED */\r\n            });\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n/** Call if FID registration is pending in another request. */\r\nasync function waitUntilFidRegistration(appConfig) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateInstallationRequest(appConfig);\r\n    while (entry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n        // createInstallation request still in progress.\r\n        await sleep(100);\r\n        entry = await updateInstallationRequest(appConfig);\r\n    }\r\n    if (entry.registrationStatus === 0 /* NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        const { installationEntry, registrationPromise } = await getInstallationEntry(appConfig);\r\n        if (registrationPromise) {\r\n            return registrationPromise;\r\n        }\r\n        else {\r\n            // if there is no registrationPromise, entry is registered.\r\n            return installationEntry;\r\n        }\r\n    }\r\n    return entry;\r\n}\r\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateInstallationRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!oldEntry) {\r\n            throw ERROR_FACTORY.create(\"installation-not-found\" /* INSTALLATION_NOT_FOUND */);\r\n        }\r\n        return clearTimedOutRequest(oldEntry);\r\n    });\r\n}\r\nfunction clearTimedOutRequest(entry) {\r\n    if (hasInstallationRequestTimedOut(entry)) {\r\n        return {\r\n            fid: entry.fid,\r\n            registrationStatus: 0 /* NOT_STARTED */\r\n        };\r\n    }\r\n    return entry;\r\n}\r\nfunction hasInstallationRequestTimedOut(installationEntry) {\r\n    return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&\r\n        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function generateAuthTokenRequest({ appConfig, platformLoggerProvider }, installationEntry) {\r\n    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\r\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\r\n    // If platform logger exists, add the platform info string to the header.\r\n    const platformLogger = platformLoggerProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (platformLogger) {\r\n        headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\r\n    }\r\n    const body = {\r\n        installation: {\r\n            sdkVersion: PACKAGE_VERSION\r\n        }\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\r\n        return completedAuthToken;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Generate Auth Token', response);\r\n    }\r\n}\r\nfunction getGenerateAuthTokenEndpoint(appConfig, { fid }) {\r\n    return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\r\nasync function refreshAuthToken(installations, forceRefresh = false) {\r\n    let tokenPromise;\r\n    const entry = await update(installations.appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\r\n            // There is a valid token in the DB.\r\n            return oldEntry;\r\n        }\r\n        else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n            // There already is a token request in progress.\r\n            tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\r\n            return oldEntry;\r\n        }\r\n        else {\r\n            // No token or token expired.\r\n            if (!navigator.onLine) {\r\n                throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\r\n            }\r\n            const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\r\n            tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\r\n            return inProgressEntry;\r\n        }\r\n    });\r\n    const authToken = tokenPromise\r\n        ? await tokenPromise\r\n        : entry.authToken;\r\n    return authToken;\r\n}\r\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\r\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateAuthTokenRequest(installations.appConfig);\r\n    while (entry.authToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n        // generateAuthToken still in progress.\r\n        await sleep(100);\r\n        entry = await updateAuthTokenRequest(installations.appConfig);\r\n    }\r\n    const authToken = entry.authToken;\r\n    if (authToken.requestStatus === 0 /* NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        return refreshAuthToken(installations, forceRefresh);\r\n    }\r\n    else {\r\n        return authToken;\r\n    }\r\n}\r\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateAuthTokenRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\r\n            return Object.assign(Object.assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n        }\r\n        return oldEntry;\r\n    });\r\n}\r\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\r\n    try {\r\n        const authToken = await generateAuthTokenRequest(installations, installationEntry);\r\n        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken });\r\n        await set(installations.appConfig, updatedInstallationEntry);\r\n        return authToken;\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) &&\r\n            (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\r\n            // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n            // Generate a new ID next time.\r\n            await remove(installations.appConfig);\r\n        }\r\n        else {\r\n            const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n            await set(installations.appConfig, updatedInstallationEntry);\r\n        }\r\n        throw e;\r\n    }\r\n}\r\nfunction isEntryRegistered(installationEntry) {\r\n    return (installationEntry !== undefined &&\r\n        installationEntry.registrationStatus === 2 /* COMPLETED */);\r\n}\r\nfunction isAuthTokenValid(authToken) {\r\n    return (authToken.requestStatus === 2 /* COMPLETED */ &&\r\n        !isAuthTokenExpired(authToken));\r\n}\r\nfunction isAuthTokenExpired(authToken) {\r\n    const now = Date.now();\r\n    return (now < authToken.creationTime ||\r\n        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);\r\n}\r\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\r\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\r\n    const inProgressAuthToken = {\r\n        requestStatus: 1 /* IN_PROGRESS */,\r\n        requestTime: Date.now()\r\n    };\r\n    return Object.assign(Object.assign({}, oldEntry), { authToken: inProgressAuthToken });\r\n}\r\nfunction hasAuthTokenRequestTimedOut(authToken) {\r\n    return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&\r\n        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\r\nasync function getId(installations) {\r\n    const installationsImpl = installations;\r\n    const { installationEntry, registrationPromise } = await getInstallationEntry(installationsImpl.appConfig);\r\n    if (registrationPromise) {\r\n        registrationPromise.catch(console.error);\r\n    }\r\n    else {\r\n        // If the installation is already registered, update the authentication\r\n        // token if needed.\r\n        refreshAuthToken(installationsImpl).catch(console.error);\r\n    }\r\n    return installationEntry.fid;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nasync function getToken(installations, forceRefresh = false) {\r\n    const installationsImpl = installations;\r\n    await completeInstallationRegistration(installationsImpl.appConfig);\r\n    // At this point we either have a Registered Installation in the DB, or we've\r\n    // already thrown an error.\r\n    const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\r\n    return authToken.token;\r\n}\r\nasync function completeInstallationRegistration(appConfig) {\r\n    const { registrationPromise } = await getInstallationEntry(appConfig);\r\n    if (registrationPromise) {\r\n        // A createInstallation request is in progress. Wait until it finishes.\r\n        await registrationPromise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function deleteInstallationRequest(appConfig, installationEntry) {\r\n    const endpoint = getDeleteEndpoint(appConfig, installationEntry);\r\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\r\n    const request = {\r\n        method: 'DELETE',\r\n        headers\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (!response.ok) {\r\n        throw await getErrorFromResponse('Delete Installation', response);\r\n    }\r\n}\r\nfunction getDeleteEndpoint(appConfig, { fid }) {\r\n    return `${getInstallationsEndpoint(appConfig)}/${fid}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\r\nasync function deleteInstallations(installations) {\r\n    const { appConfig } = installations;\r\n    const entry = await update(appConfig, oldEntry => {\r\n        if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n            // Delete the unregistered entry without sending a deleteInstallation request.\r\n            return undefined;\r\n        }\r\n        return oldEntry;\r\n    });\r\n    if (entry) {\r\n        if (entry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n            // Can't delete while trying to register.\r\n            throw ERROR_FACTORY.create(\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */);\r\n        }\r\n        else if (entry.registrationStatus === 2 /* COMPLETED */) {\r\n            if (!navigator.onLine) {\r\n                throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\r\n            }\r\n            else {\r\n                await deleteInstallationRequest(appConfig, entry);\r\n                await remove(appConfig);\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\r\nfunction onIdChange(installations, callback) {\r\n    const { appConfig } = installations;\r\n    addCallback(appConfig, callback);\r\n    return () => {\r\n        removeCallback(appConfig, callback);\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\r\nfunction getInstallations(app = getApp()) {\r\n    const installationsImpl = _getProvider(app, 'installations').getImmediate();\r\n    return installationsImpl;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction extractAppConfig(app) {\r\n    if (!app || !app.options) {\r\n        throw getMissingValueError('App Configuration');\r\n    }\r\n    if (!app.name) {\r\n        throw getMissingValueError('App Name');\r\n    }\r\n    // Required app config keys\r\n    const configKeys = [\r\n        'projectId',\r\n        'apiKey',\r\n        'appId'\r\n    ];\r\n    for (const keyName of configKeys) {\r\n        if (!app.options[keyName]) {\r\n            throw getMissingValueError(keyName);\r\n        }\r\n    }\r\n    return {\r\n        appName: app.name,\r\n        projectId: app.options.projectId,\r\n        apiKey: app.options.apiKey,\r\n        appId: app.options.appId\r\n    };\r\n}\r\nfunction getMissingValueError(valueName) {\r\n    return ERROR_FACTORY.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */, {\r\n        valueName\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INSTALLATIONS_NAME = 'installations';\r\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\r\nconst publicFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Throws if app isn't configured properly.\r\n    const appConfig = extractAppConfig(app);\r\n    const platformLoggerProvider = _getProvider(app, 'platform-logger');\r\n    const installationsImpl = {\r\n        app,\r\n        appConfig,\r\n        platformLoggerProvider,\r\n        _delete: () => Promise.resolve()\r\n    };\r\n    return installationsImpl;\r\n};\r\nconst internalFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Internal FIS instance relies on public FIS instance.\r\n    const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\r\n    const installationsInternal = {\r\n        getId: () => getId(installations),\r\n        getToken: (forceRefresh) => getToken(installations, forceRefresh)\r\n    };\r\n    return installationsInternal;\r\n};\r\nfunction registerInstallations() {\r\n    _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\" /* PUBLIC */));\r\n    _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\" /* PRIVATE */));\r\n}\n\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterInstallations();\r\nregisterVersion(name, version);\r\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\nregisterVersion(name, version, 'esm2017');\n\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };\n"]},"metadata":{},"sourceType":"module"}