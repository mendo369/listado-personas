{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\nconst AUTH_PROVIDER_NAME = 'auth';\n\nclass Auth {\n  constructor(auth) {\n    return auth;\n  }\n\n}\n\nclass AuthInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(AUTH_PROVIDER_NAME);\n  }\n\n}\n\nconst authInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(AUTH_PROVIDER_NAME))), distinct());\nconst PROVIDED_AUTH_INSTANCES = new InjectionToken('angularfire2.auth-instances');\n\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n  const defaultAuth = ɵgetDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Auth(defaultAuth);\n}\n\nfunction authInstanceFactory(fn) {\n  return (zone, injector) => {\n    const auth = zone.runOutsideAngular(() => fn(injector));\n    return new Auth(auth);\n  };\n}\n\nconst AUTH_INSTANCES_PROVIDER = {\n  provide: AuthInstances,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES]]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n  provide: Auth,\n  useFactory: defaultAuthInstanceFactory,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES], FirebaseApp]\n};\n\nclass AuthModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'auth');\n  }\n\n}\n\nAuthModule.ɵfac = function AuthModule_Factory(t) {\n  return new (t || AuthModule)();\n};\n\nAuthModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AuthModule\n});\nAuthModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction provideAuth(fn, ...deps) {\n  return {\n    ngModule: AuthModule,\n    providers: [{\n      provide: PROVIDED_AUTH_INSTANCES,\n      useFactory: authInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, [new Optional(), AppCheckInstances], ...deps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst authState = ɵzoneWrap(authState$1, true);\nconst user = ɵzoneWrap(user$1, true);\nconst idToken = ɵzoneWrap(idToken$1, true); // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst applyActionCode = ɵzoneWrap(applyActionCode$1, true);\nconst checkActionCode = ɵzoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = ɵzoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = ɵzoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = ɵzoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = ɵzoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = ɵzoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = ɵzoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = ɵzoneWrap(getAuth$1, true);\nconst getIdToken = ɵzoneWrap(getIdToken$1, true);\nconst getIdTokenResult = ɵzoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = ɵzoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = ɵzoneWrap(getRedirectResult$1, true);\nconst initializeAuth = ɵzoneWrap(initializeAuth$1, true);\nconst isSignInWithEmailLink = ɵzoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = ɵzoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = ɵzoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = ɵzoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = ɵzoneWrap(linkWithRedirect$1, true);\nconst multiFactor = ɵzoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = ɵzoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = ɵzoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = ɵzoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = ɵzoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = ɵzoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = ɵzoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = ɵzoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = ɵzoneWrap(reload$1, true);\nconst sendEmailVerification = ɵzoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = ɵzoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = ɵzoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = ɵzoneWrap(setPersistence$1, true);\nconst signInAnonymously = ɵzoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = ɵzoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = ɵzoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = ɵzoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = ɵzoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = ɵzoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = ɵzoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = ɵzoneWrap(signInWithRedirect$1, true);\nconst signOut = ɵzoneWrap(signOut$1, true);\nconst unlink = ɵzoneWrap(unlink$1, true);\nconst updateCurrentUser = ɵzoneWrap(updateCurrentUser$1, true);\nconst updateEmail = ɵzoneWrap(updateEmail$1, true);\nconst updatePassword = ɵzoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = ɵzoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = ɵzoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = ɵzoneWrap(useDeviceLanguage$1, true);\nconst verifyBeforeUpdateEmail = ɵzoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = ɵzoneWrap(verifyPasswordResetCode$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, verifyBeforeUpdateEmail, verifyPasswordResetCode };","map":{"version":3,"sources":["C:/cursos_Udemy/Angular/listado-personas/node_modules/@angular/fire/fesm2015/angular-fire-auth.js"],"names":["ɵgetAllInstancesOf","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵzoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","Optional","NgModule","NgZone","Injector","FirebaseApp","FirebaseApps","registerVersion","AppCheckInstances","authState","authState$1","user","user$1","idToken","idToken$1","applyActionCode","applyActionCode$1","checkActionCode","checkActionCode$1","confirmPasswordReset","confirmPasswordReset$1","connectAuthEmulator","connectAuthEmulator$1","createUserWithEmailAndPassword","createUserWithEmailAndPassword$1","deleteUser","deleteUser$1","fetchSignInMethodsForEmail","fetchSignInMethodsForEmail$1","getAdditionalUserInfo","getAdditionalUserInfo$1","getAuth","getAuth$1","getIdToken","getIdToken$1","getIdTokenResult","getIdTokenResult$1","getMultiFactorResolver","getMultiFactorResolver$1","getRedirectResult","getRedirectResult$1","initializeAuth","initializeAuth$1","isSignInWithEmailLink","isSignInWithEmailLink$1","linkWithCredential","linkWithCredential$1","linkWithPhoneNumber","linkWithPhoneNumber$1","linkWithPopup","linkWithPopup$1","linkWithRedirect","linkWithRedirect$1","multiFactor","multiFactor$1","onAuthStateChanged","onAuthStateChanged$1","onIdTokenChanged","onIdTokenChanged$1","parseActionCodeURL","parseActionCodeURL$1","reauthenticateWithCredential","reauthenticateWithCredential$1","reauthenticateWithPhoneNumber","reauthenticateWithPhoneNumber$1","reauthenticateWithPopup","reauthenticateWithPopup$1","reauthenticateWithRedirect","reauthenticateWithRedirect$1","reload","reload$1","sendEmailVerification","sendEmailVerification$1","sendPasswordResetEmail","sendPasswordResetEmail$1","sendSignInLinkToEmail","sendSignInLinkToEmail$1","setPersistence","setPersistence$1","signInAnonymously","signInAnonymously$1","signInWithCredential","signInWithCredential$1","signInWithCustomToken","signInWithCustomToken$1","signInWithEmailAndPassword","signInWithEmailAndPassword$1","signInWithEmailLink","signInWithEmailLink$1","signInWithPhoneNumber","signInWithPhoneNumber$1","signInWithPopup","signInWithPopup$1","signInWithRedirect","signInWithRedirect$1","signOut","signOut$1","unlink","unlink$1","updateCurrentUser","updateCurrentUser$1","updateEmail","updateEmail$1","updatePassword","updatePassword$1","updatePhoneNumber","updatePhoneNumber$1","updateProfile","updateProfile$1","useDeviceLanguage","useDeviceLanguage$1","verifyBeforeUpdateEmail","verifyBeforeUpdateEmail$1","verifyPasswordResetCode","verifyPasswordResetCode$1","AUTH_PROVIDER_NAME","Auth","constructor","auth","AuthInstances","authInstance$","pipe","PROVIDED_AUTH_INSTANCES","defaultAuthInstanceFactory","provided","defaultApp","defaultAuth","authInstanceFactory","fn","zone","injector","runOutsideAngular","AUTH_INSTANCES_PROVIDER","provide","deps","DEFAULT_AUTH_INSTANCE_PROVIDER","useFactory","AuthModule","full","ɵfac","ɵmod","ɵinj","type","args","providers","provideAuth","ngModule","multi"],"mappings":"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","sourcesContent":["import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\n\nconst AUTH_PROVIDER_NAME = 'auth';\nclass Auth {\n    constructor(auth) {\n        return auth;\n    }\n}\nclass AuthInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(AUTH_PROVIDER_NAME);\n    }\n}\nconst authInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(AUTH_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_AUTH_INSTANCES = new InjectionToken('angularfire2.auth-instances');\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n    const defaultAuth = ɵgetDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n    return defaultAuth && new Auth(defaultAuth);\n}\nfunction authInstanceFactory(fn) {\n    return (zone, injector) => {\n        const auth = zone.runOutsideAngular(() => fn(injector));\n        return new Auth(auth);\n    };\n}\nconst AUTH_INSTANCES_PROVIDER = {\n    provide: AuthInstances,\n    deps: [\n        [new Optional(), PROVIDED_AUTH_INSTANCES],\n    ]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n    provide: Auth,\n    useFactory: defaultAuthInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_AUTH_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass AuthModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'auth');\n    }\n}\nAuthModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAuthModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthModule });\nAuthModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthModule, providers: [\n        DEFAULT_AUTH_INSTANCE_PROVIDER,\n        AUTH_INSTANCES_PROVIDER,\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_AUTH_INSTANCE_PROVIDER,\n                        AUTH_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideAuth(fn, ...deps) {\n    return {\n        ngModule: AuthModule,\n        providers: [{\n                provide: PROVIDED_AUTH_INSTANCES,\n                useFactory: authInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    [new Optional(), AppCheckInstances],\n                    ...deps,\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst authState = ɵzoneWrap(authState$1, true);\nconst user = ɵzoneWrap(user$1, true);\nconst idToken = ɵzoneWrap(idToken$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst applyActionCode = ɵzoneWrap(applyActionCode$1, true);\nconst checkActionCode = ɵzoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = ɵzoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = ɵzoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = ɵzoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = ɵzoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = ɵzoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = ɵzoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = ɵzoneWrap(getAuth$1, true);\nconst getIdToken = ɵzoneWrap(getIdToken$1, true);\nconst getIdTokenResult = ɵzoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = ɵzoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = ɵzoneWrap(getRedirectResult$1, true);\nconst initializeAuth = ɵzoneWrap(initializeAuth$1, true);\nconst isSignInWithEmailLink = ɵzoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = ɵzoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = ɵzoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = ɵzoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = ɵzoneWrap(linkWithRedirect$1, true);\nconst multiFactor = ɵzoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = ɵzoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = ɵzoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = ɵzoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = ɵzoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = ɵzoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = ɵzoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = ɵzoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = ɵzoneWrap(reload$1, true);\nconst sendEmailVerification = ɵzoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = ɵzoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = ɵzoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = ɵzoneWrap(setPersistence$1, true);\nconst signInAnonymously = ɵzoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = ɵzoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = ɵzoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = ɵzoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = ɵzoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = ɵzoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = ɵzoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = ɵzoneWrap(signInWithRedirect$1, true);\nconst signOut = ɵzoneWrap(signOut$1, true);\nconst unlink = ɵzoneWrap(unlink$1, true);\nconst updateCurrentUser = ɵzoneWrap(updateCurrentUser$1, true);\nconst updateEmail = ɵzoneWrap(updateEmail$1, true);\nconst updatePassword = ɵzoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = ɵzoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = ɵzoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = ɵzoneWrap(useDeviceLanguage$1, true);\nconst verifyBeforeUpdateEmail = ɵzoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = ɵzoneWrap(verifyPasswordResetCode$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, verifyBeforeUpdateEmail, verifyPasswordResetCode };\n"]},"metadata":{},"sourceType":"module"}